services:
  zookeeper:
    image: 'confluentinc/cp-zookeeper:latest'
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    ports:
      - "2181:2181"

  kafka:
    image: 'confluentinc/cp-kafka:latest'
    depends_on:
      - zookeeper
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
    ports:
      - "9092:9092"

  data_producer:
    build:
      context: ./data_producer
      dockerfile: Dockerfile
    depends_on:
      - kafka
    environment:
      - PYTHONUNBUFFERED=1  # Ensures real-time log output

  flask-consumer:
    build:
      context: ./flask_consumer
      dockerfile: Dockerfile
    depends_on:
      - data_producer
    environment:
      - PYTHONUNBUFFERED=1

  flask-app:
    build:
      context: ./flask-app
      dockerfile: Dockerfile
    ports:
      - "5555:5555"
    depends_on:
      - data_producer
      - flask-consumer
    environment:
      - FLASK_ENV=development

  db-consumer:
    build:
      context: ./db_consumer
      dockerfile: Dockerfile
    depends_on:
      - data_producer
    volumes:
      - postgres_data:/var/lib/postgresql/data
    environment:
      - PYTHONUNBUFFERED=1

  postgres:
    image: postgres:14-alpine
    ports:
      - "5432:5432"
    depends_on:
      - db-consumer
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init.sql:/docker-entrypoint-initdb.d/init.sql
    environment:
      - POSTGRES_USER=db_user
      - POSTGRES_PASSWORD=S#cret123
      - POSTGRES_DB=sensordata

  log-consumer:
    build:
      context: ./log_consumer
      dockerfile: Dockerfile
    depends_on:
      - data_producer
    environment:
      - PYTHONUNBUFFERED=1

volumes:
  postgres_data:

networks:
  default:
    name: kafka-network